#!/usr/bin/env python3
"""
Comprehensive test script for the jupyter-notebooks-report-generator.
Tests all configuration scenarios mentioned in README.md.
"""

import os
import glob
from tabs_report.tabs_report_generator import generate_report
import time
from datetime import datetime

def test_configuration(config_file, description):
    """Test a specific configuration file."""
    print(f"\n{'='*60}")
    print(f"Testing: {description}")
    print(f"Config: {config_file}")
    print(f"{'='*60}")
    
    start_time = time.time()
    
    try:
        generate_report(config_file)
        end_time = time.time()
        elapsed = end_time - start_time
        print(f"‚úÖ SUCCESS - Completed in {elapsed:.2f} seconds")
        return True
    except Exception as e:
        end_time = time.time()
        elapsed = end_time - start_time
        print(f"‚ùå FAILED after {elapsed:.2f} seconds")
        print(f"Error: {str(e)}")
        return False

def list_generated_files(output_pattern):
    """List files generated by the test."""
    files = glob.glob(output_pattern)
    if files:
        print(f"Generated files ({len(files)}):")
        for file in sorted(files):
            file_size = os.path.getsize(file)
            print(f"  - {file} ({file_size:,} bytes)")
    else:
        print("No files found matching pattern:", output_pattern)
    return files

def main():
    """Run all configuration tests."""
    print("üöÄ Starting comprehensive test suite for jupyter-notebooks-report-generator")
    print(f"Test started at: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    
    # Create test_configs directory if it doesn't exist
    os.makedirs("../test_configs", exist_ok=True)
    
    # Test configurations in order of complexity
    test_cases = [
        {
            "config": "test_configs/single_notebook_config.json",
            "description": "Single Notebook Configuration",
            "output_pattern": "./test_output/single/*.html"
        },
        {
            "config": "test_configs/flat_structure_config.json", 
            "description": "Flat Structure Configuration",
            "output_pattern": "./test_output/flat/*.html"
        },
        {
            "config": "test_configs/nested_structure_config.json",
            "description": "Nested Structure Configuration", 
            "output_pattern": "./test_output/nested/*.html"
        },
        {
            "config": "test_configs/directory_discovery_config.json",
            "description": "Directory Discovery Configuration",
            "output_pattern": "./test_output/directory/*.html"
        },
        {
            "config": "test_configs/auto_nested_config.json",
            "description": "Auto Nested Structure Configuration",
            "output_pattern": "./test_output/auto_nested/*.html"
        },
        {
            "config": "test_configs/execution_enabled_config.json",
            "description": "Execution Enabled Configuration",
            "output_pattern": "./test_output/executed/*.html"
        }
    ]
    
    results = {}
    total_start_time = time.time()
    
    for test_case in test_cases:
        config_file = test_case["config"]
        description = test_case["description"]
        output_pattern = test_case["output_pattern"]
        
        # Run the test
        success = test_configuration(config_file, description)
        results[description] = success
        
        # List generated files
        files = list_generated_files(output_pattern)
        
        # Brief pause between tests
        time.sleep(1)
    
    # Summary
    total_end_time = time.time()
    total_elapsed = total_end_time - total_start_time
    
    print(f"\n{'='*60}")
    print("üìä TEST SUMMARY")
    print(f"{'='*60}")
    print(f"Total execution time: {total_elapsed:.2f} seconds")
    
    passed = sum(1 for result in results.values() if result)
    total = len(results)
    
    print(f"Tests passed: {passed}/{total}")
    
    for description, success in results.items():
        status = "‚úÖ PASS" if success else "‚ùå FAIL"
        print(f"  {status} - {description}")
    
    # Count total generated files
    all_output_files = glob.glob("./test_output/**/*.html", recursive=True)
    print(f"\nTotal HTML files generated: {len(all_output_files)}")
    
    total_size = sum(os.path.getsize(f) for f in all_output_files)
    print(f"Total output size: {total_size:,} bytes ({total_size/1024/1024:.2f} MB)")
    
    if passed == total:
        print("\nüéâ All tests passed successfully!")
        return 0
    else:
        print(f"\n‚ö†Ô∏è  {total - passed} test(s) failed.")
        return 1

if __name__ == "__main__":
    exit_code = main()
    exit(exit_code)